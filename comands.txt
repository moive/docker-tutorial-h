-- download image hello-world
docker pull hello-world

-- create a container for image hello-world
docker container run hello-world

-- list all containers
docker container ls -a
docker ps -a

-- help docker container
docker container --help

-- remove container
docker container rm <id or name>

-- remove all stopped containers
docker container prune

-- stop container
docker stop <bc0 79d 6a7>

--help docker image
docker image --help

-- remove image
docker image rm <name-image>

-- public and detached modes
docker container run -d -p 80:80 docker/getting-started
-- public and detached modes -shortcut
docker container run -dp 4000:80 docker/getting-started

-- stop containter and start
docker container stop f39
docker container start f39

-- force delete container
docker container rm -f <f39>

-- deleting image docker/getting-started
docker image rm docker/getting-started

-- pull postgres
docker pull postgres

-- run postgres
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres

-- added port
 docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -dp 5433:5432 postgres

-- added other instance of postgres multiline using bactick
docker container run `
--name postgres-alpha `
-e POSTGRES_PASSWORD=mypass1 `
-dp 5433:5432 `
postgres

-- added postgres: :14-alpine3.19
docker container run `
--name postgres-alpha `
-e POSTGRES_PASSWORD=mypass1 `
-dp 5433:5432 `
postgres::14-alpine3.19

-- remove containers at the same time
docker container rm -f <5ce> <710>

-- pull mariadb jammy
docker pull mariadb:jammy

-- create container with password random
docker container run `
>> -e MARIADB_RANDOM_ROOT_PASSWORD=yes `
>> -dp 3307:3306 `
>> mariadb:jammy

-- get id container
docker container ls

-- get generate password
docker container logs <id_container>

-- view logs live
docker container logs -f <id_container>

--remove images postgres
docker image rm <id_image> <id_image>

-- create containter world-db
docker container run `
--name world-db `
-e MARIADB_USER=example-user `
-e MARIADB_PASSWORD=user-password `
-e MARIADB_ROOT_PASSWORD=root-secret-password `
-e MARIADB_DATABASE=world-db `
-dp 3307:3306 `
mariadb:jammy

--create volume
docker volume create world-db

--list volumes
docker volume ls

-- inspect volume
docker volume inspect world-db

-- create container with volume
docker container run `
--name world-db `
-e MARIADB_USER=example-user `
-e MARIADB_PASSWORD=user-password `
-e MARIADB_ROOT_PASSWORD=root-secret-password `
-e MARIADB_DATABASE=world-db `
-dp 3307:3306 `
--volume world-db:/var/lib/mysql `
mariadb:jammy

-- create and run container phpmyadmin:5.2.1-apache
docker container run --name phpmyadmin -dp 8080:80 -e PMA_ARBITRARY=1 phpmyadmin:5.2.1-apache

--create network
docker network create world-red

--list all network
docker network ls

-- connect network to containers
docker network connect world-red phpmyadmin
docker network connect world-red world-db

--docker network inspect
docker network inspect world-red

-- create containter mariadb with world-db and network
docker container run `
--name world-db `
-e MARIADB_USER=example-user `
-e MARIADB_PASSWORD=user-password `
-e MARIADB_ROOT_PASSWORD=root-secret-password `
-e MARIADB_DATABASE=world-db `
-dp 3307:3306 `
--volume world-db:/var/lib/mysql `
--network world-red `
mariadb:jammy


-- create and run container phpmyadmin:apache with network
docker container run --name phpmyadmin -dp 8080:80 -e PMA_ARBITRARY=1 --network world-red phpmyadmin:apache

-- bind volumes exercice
docker container run `
--name nest-app `
-w /app `
-p 8080:3000 `
-v ${pwd}:/app `
node:16-alpine3.16 `
sh -c "npm install && npm run start:dev"


-- bind volumes exercice detach
docker container run `
--name nest-app `
-w /app `
-dp 8080:3000 `
-v ${pwd}:/app `
node:16-alpine3.16 `
sh -c "npm install && npm run start:dev"

-- view logs in terminal
docker container logs -f <id_container exa: 650>

-- interactive terminal
docker exec -it 462 /bin/sh

-- enter world: exit for end terminal interactive

--create volume
docker volume create postgres-db

-- mounted the postgres image

docker container run `
-d `
--name postgres-db `
-e POSTGRES_PASSWORD=123456 `
-v postgres-db:/var/lib/postgresql/data `
postgres:15.1

-- run pgAdmin
docker container run `
--name pgAdmin `
-e PGADMIN_DEFAULT_PASSWORD=123456 `
-e PGADMIN_DEFAULT_EMAIL=superman@google.com `
-dp 8080:80 `
dpage/pgadmin4:6.17


-- create network red: postgres-net
docker network create postgres-net

--connect network postgres-net to container
docker network connect postgres-net <id container>

-- verified network to container
docker network inspect postgres-net


-- run compose yml
docker compose up

-- remove containers compose yml
docker compose down

-- follow logs compose
docker compose logs -f

-- string connection with auth
mongodb://strider:123456@localhost:27018


-- build image
docker build --tag cron-ticker .
-- show image created
docker image ls

--run container
docker container run cron-ticker

--stop container 
docker stop <id>

-- rename tags
docker image tag cron-ticker cron-ticker:bufalo

-- view all images with tags
docker image ls

-- rebuild image with new tag
docker build --tag cron-ticker:bufalo .

-- create repository at dockerhub
-- dockerhub show: docker push moive30/cron-ticker:tagname
--rename image to name/dockerhub
docker image tag cron-ticker:bufalo moive30/cron-ticker:bufalo

-- push image
docker push moive30/cron-ticker:bufalo

-- pull image cron-ticker:bufalo
docker container run moive/cron-ticker:bufalo

-- verify image
docker image ls

--rebuild image with test files
docker build -t moive30/cron-ticker:mapache .

-- mount image in container
docker container run -d moive30/cron-ticker:mapache

-- navigation files docker
docker exec -it <id-container 15a> /bin/sh

-- create buildx mybuilder and using
docker buildx create --name mybuilder --bootstrap --use

-- inspect buildx
docker buildx inspect

-- Build the Dockerfile with buildx, passing the list of architectures to build
docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t moive30/cron-ticker:polar --push .

-- list all buildx
docker buildx ls

-- switch buildx default
buildx use default

-- remove mybuilder
docker buildx rm mybuilder

--runing stages
docker build -t moive30/cron-ticker:latest .

-- run image in container
docker container run moive30/cron-ticker

-- pushed image latest in dockerhub
docker push moive30/cron-ticker

-- created custom buildx
docker buildx create --name mybuilder --bootstrap --use
docker buildx ls

-- added architectures
docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t moive30/cron-ticker:cat --push .

-- inspect
docker buildx imagetools inspect moive30/cron-ticker:cat

-- remove container and volumes
docker compose down --volumes

-- buiding for production
docker compose -f docker-compose.prod.yml build

-- run compose-prod
docker compose -f docker-compose.prod.yml up

-- building with mulitple platform
docker buildx build --platform linux/amd64,linux/arm64 -t moive30/teslo-shop:latest --push .

-- create an image docker-graphql
docker build -t moive30/docker-graphql:0.0.1 .

-- run image docker-graphql in container
docker container run -p 3001:3000 moive30/docker-graphql:0.0.1

-- added and run nginx
docker run --name some-nginx -d -p 8080:80 nginx:1.25.3

-- inspect nginx
docker exec -it <8fc> bash

cd etc/nginx/
cd conf.d
cat default.conf

-- build image heroes-app
docker build -t heroes-app . --no-cache

-- run container port 8081 with heroes-app image
docker container run -p 8081:80 heroes-app 

-- recreate image heroes-app with new config nginx conf
docker build -t heroes-app . --no-cache

-- run container with new config image
docker container run -p 8081:80 heroes-app

-- generate string base64 postgres = cG9zdGdyZXMNCg==
echo -n postgres | base64

-- kubectl version
kubectl version

-- show ip cluster
kubectl get all

-- run
kubectl apply -f postgres.config.yml
kubectl apply -f postgres-secrets.yml
kubectl apply -f postgres.yml

--kubectl describe
kubectl describe deployment.apps/postgres-deployment

--kubectl logs
kubectl logs pod/postgres-deployment-86c949477b-xjg86

-- add pg-admin to cluster
kubectl apply -f pg-admin-secrets.yml
kubectl apply -f pg-admin.yml

--show all cluster
kubectl get all

-- open pg-browser-default
minikube service pg-admin-service

-- display errors and success 
kubectl describe pod/backend-deployment-597c9fd986-4tw5q

-- display logs backend
kubectl logs pod/backend-deployment-597c9fd986-4tw5q


-- restar backend-deployment
kubectl rollout restart deployment backend-deployment